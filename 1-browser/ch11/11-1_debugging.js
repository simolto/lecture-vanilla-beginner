// 11-1. 마무리 - 디버깅 팁

// 설명: 브라우저 개발자 도구에서 Sources 탭을 확인해 보면 작성된 코드에 따른 라인을 번호로 매겨진 것을 확인할 수 있는데요,
//  여기서 번호를 클릭하여 상세 정보를 디버깅할 수 있습니다.
//  상세 정보는 watch 뿐 만 아니라, call stack, scope 등 있습니다.
//  이처럼 디버깅 툴을 활용하면 함수 호출 부를 확인하거나 변수에 어떤 값이 있는지 등 확인 가능해서 매우 유용합니다.

/**
 * 디버깅 시 확인 가능한 상세 정보
 *  - watch: 확인하고 싶은 데이터를 변수로 작성하게 되면 해당 탭에서 확인 가능
 *  - call-stack: 함수 호출 순서를 확인 가능(어디서부터 호출된 함수인지 모를 때 자주 활용됨)
 *  - scope: 어느 위치에서 선언되었는지에 대한 여부 확인 가능
 *
 * 커맨드 버튼들을 통한 디버깅 실행 유형(왼편부터 하나씩 설명됨) ✨: 자주 활용되는 것
 *  - breakpoint 사이에 점프할 때 활용됨(breakpoint를 skip 하고 다시 실행됨. 중단점이 여러 개라면 해당 중단점마다 멈춰짐)
 *  - 한 줄씩 확인하고 싶을 때 활용됨 ✨
 *  - 함수 안으로 들어가서 코드 블럭 내부를 확인하고 싶을 때 활용됨 ✨
 *  - 지금 있는 지점(포인터. 여기서는 함수가 될 것)에서 밖으로 나갈 때 활용됨
 *  - 지점에서 한 줄씩 넘어가서 확인할 때 활용됨
 *  - 모든 breakpoint를 키거나 끌 때 활용됨(scope 탭 밑에 breakpoints 탭도 활용할 것!)
 *  - 에러 발생 시 바로 디버깅 모드로 전환되어서 확인할 때 활용됨 ✨
 */
